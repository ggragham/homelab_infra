---
- name: Install and config Gitea
  block:
    - name: Create Gitea system user
      user:
        name: '{{ GITEA_USER }}'
        comment: Git Version Control
        home: /home/{{ GITEA_USER }}
        shell: /bin/bash
        password_lock: true

    - name: Create Gitea DB
      mysql_db:
        name: '{{ GITEA_DB_NAME }}'
        collation: utf8mb4_general_ci
        encoding: utf8mb4
        login_unix_socket: /var/run/mysqld/mysqld.sock
        state: present
      notify: Restart MariaDB

    - name: Create Gitea DB user
      mysql_user:
        name: '{{ GITEA_DB_USER }}'
        password: '{{ GITEA_DB_PASSWORD }}'
        host: '{{ (GITEA_DOCKERIZED == true) | ternary(GITEA_DB_ACCESS_SUBNET, "localhost") }}'
        priv: '{{ GITEA_DB_NAME }}.*:ALL,GRANT'
        login_unix_socket: /var/run/mysqld/mysqld.sock
        state: present
      notify: Restart MariaDB
      no_log: true

    - name: Create Gitea data dirs
      file:
        path: '{{ item }}'
        state: directory
        owner: '{{ GITEA_USER }}'
        group: '{{ GITEA_USER }}'
        mode: 0750
        recurse: true
      with_items:
        - '{{ GITEA_CONFIG_PATH }}'
        - '{{ GITEA_DATA_PATH }}'
        - '{{ GITEA_DATA_PATH }}/data'
        - '{{ GITEA_DATA_PATH }}/custom'
        - '{{ GITEA_DATA_PATH }}/log'

    # Bare metal install
    - name: Gitea bare metal install
      block:
        - name: Install deps
          apt:
            name: [git, jq]
            state: latest
            update_cache: true
          when: ansible_os_family=="Debian"

        - name: Create Gitea dir
          file:
            path: '{{ GITEA_PATH }}'
            state: directory
            owner: '{{ GITEA_USER }}'
            group: root
            mode: 0775

        - name: Get Gitea latest version
          shell:
            cmd: curl -s "https://api.github.com/repos/go-gitea/gitea/releases/latest" | jq -r '.tag_name' 2>&1 | sed -e 's|.*-||' -e 's|^v||'
          register: gitea_latest_version

        - name: x86_64
          set_fact:
            gitea_arch: amd64
          when: ansible_architecture=="x86_64"

        - name: armv7
          set_fact:
            gitea_arch: arm-6
          when: ansible_architecture=="armv7l"

        - name: Get Gitea
          get_url:
            url: https://dl.gitea.com/gitea/{{ gitea_latest_version.stdout }}/gitea-{{ gitea_latest_version.stdout }}-linux-{{ gitea_arch }}
            dest: '{{ GITEA_PATH }}/gitea'
            checksum: sha256:https://dl.gitea.com/gitea/{{ gitea_latest_version.stdout }}/gitea-{{ gitea_latest_version.stdout }}-linux-{{ gitea_arch }}.sha256
            mode: 0755

        - name: Systemd config
          template:
            src: gitea_service.j2
            dest: /etc/systemd/system/gitea.service
            owner: '{{ GITEA_USER }}'
            group: '{{ GITEA_USER }}'
            mode: 0640

      when: GITEA_DOCKERIZED != true

    # Dockerized install
    - name: Gitea containerized install
      block:
        - name: Install Docker
          include_role:
            name: docker

        - name: Add {{ GITEA_USER }} to docker group
          user:
            name: '{{ GITEA_USER }}'
            groups: docker
            append: true

        - name: Create directory
          file:
            path: '{{ GITEA_PATH }}_docker/'
            state: directory
            owner: '{{ GITEA_USER }}'
            group: root
            mode: 0775

        - name: Apply Docker Compose template
          template:
            src: docker_compose.yml.j2
            dest: /opt/gitea_docker/docker-compose.yml
            owner: '{{ GITEA_USER }}'
            group: root
            mode: 0640

        - name: Configure SSH
          block:
            - name: Create gitea-shell script
              copy:
                src: gitea-shell
                dest: /usr/local/bin/gitea-shell
                mode: 0755
            - name: Change shell for {{ GITEA_USER }} user
              user:
                name: '{{ GITEA_USER }}'
                shell: /usr/local/bin/gitea-shell
            - name: Add SSH configuration
              template:
                src: 20_gitea.conf.j2
                dest: /etc/ssh/sshd_config.d/20_gitea.conf
                mode: 0755
              notify: Restart sshd

      when: GITEA_DOCKERIZED == true

    - name: Apply config
      template:
        src: gitea_config.j2
        dest: '{{ GITEA_CONFIG_PATH }}/app.ini'
        owner: '{{ GITEA_USER }}'
        group: '{{ GITEA_USER }}'
        mode: 0600
      no_log: true

    - name: Check runner existence
      stat:
        path: /mnt/{{ ACT_DATA_PATH }}/.runner
      register: runner_exist
      tags: act_runner

    - name: Gitea Actions
      block:
        - name: Create act_runner data dir
          file:
            path: '{{ ACT_DATA_PATH }}'
            state: directory
            mode: 0775

        - name: Apply act_runner config
          template:
            src: act_config.yml.j2
            dest: /opt/gitea_docker/config.yml
            owner: '{{ GITEA_USER }}'
            group: root
            mode: 0640

        - name: Start Gitea
          command: docker compose up gitea -d
          args:
            chdir: '{{ GITEA_PATH }}_docker/'

        - name: Wait for Gitea to become available
          wait_for:
            host: '{{ SERVER_IP }}'
            port: '{{ GITEA_PORT }}'
            state: started
            timeout: 60

        - name: Generate runner token
          shell: docker exec gitea_rootless /app/gitea/gitea actions generate-runner-token -c /etc/gitea/app.ini | tail -n 1
          register: act_token
        - set_fact:
            runner_token: '{{ act_token.stdout }}'

        - name: Create .runner file
          file:
            path: '{{ ACT_DATA_PATH}}/.runner'
            state: touch
            mode: '0644'

        - name: Register runner
          shell: docker run -v {{ ACT_DATA_PATH }}/.runner:/.runner -v ./config.yml:/config.yml -v /var/run/docker.sock:/var/run/docker.sock --entrypoint="" --rm gitea/act_runner:latest act_runner register --no-interactive --instance http://{{ SERVER_IP }}:{{ GITEA_PORT }} --token {{ runner_token }}
          args:
            chdir: '{{ GITEA_PATH }}_docker/'

        - name: Stop Gitea
          command: docker compose down
          args:
            chdir: '{{ GITEA_PATH }}_docker/'

      when: not runner_exist.stat.exists
      tags: act_runner

    - name: Apply Gitea nginx config
      block:
        - name: Copy Gitea nginx config
          template:
            src: gitea_nginx.j2
            dest: /etc/nginx/sites-available/gitea.conf
            mode: 0640

        - name: Enable Gitea nginx config
          file:
            src: /etc/nginx/sites-available/gitea.conf
            dest: /etc/nginx/sites-enabled/gitea.conf
            state: link

    - name: Start gitea
      block:
        - name: Start Gitea service
          service:
            name: gitea
            state: started
          when: GITEA_DOCKERIZED != true

        - name: Run Docker Compose
          shell: docker compose down && docker compose up -d
          args:
            chdir: '{{ GITEA_PATH }}_docker/'
          when: GITEA_DOCKERIZED == true

    - name: Add admin user
      block:
        - command: '{% if GITEA_DOCKERIZED == true %}docker exec -i gitea_rootless /app/gitea/gitea{% else %}sudo -u {{ GITEA_USER }} {{ GITEA_PATH }}/gitea{% endif %} admin user create --username {{ GITEA_ADMIN_USER }} --admin --password {{ GITEA_ADMIN_PASSWORD }} --email {{ GITEA_ADMIN_EMAIL }} -c {{ GITEA_CONFIG_PATH }}/app.ini'
          no_log: true
      rescue:
        - debug:
            msg: Sucksessfully failed
      tags: gitea_create_admin_user

  become: true
  tags: gitea
